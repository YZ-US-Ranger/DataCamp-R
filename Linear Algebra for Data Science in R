## Creating Vectors in R
The `rep()` command in R creates a vector that repeats the same element a prescribed number of times, while the `seq()` command creates a vector that follows a prescribed pattern.

A vector can be manually created by using the `c()` command, which stands for "concatenate".

```
> rep(3, 3)
[1] 3 3 3

seq(2, 6, by = 2)
```

## The Algebra of Vectors
Multiplication of two vectors is a trickier topic theoretically, but in R, component-wise multiplication of two vectors is legal and accomplished using the `*` command.

In the case where they are not the same size, R recycles elements of the shorter vector to obtain the given result (with a warning message).

```
> x
[1] 1 2 3 4 5 6 7
> z
[1] 1 1 2
> print(x + z)
Warning message: longer object length is not a multiple of shorter object length
[1] 2 3 5 5 6 8 8
```

## Creating Matrices in R
The `matrix(a, nrow = b, ncol = c)` command in R creates a matrix that repeats the element `a` in a matrix with `b` rows and `c` columns. A matrix can be manually created by using the `c()` command as well.

```
# Create a matrix B and changing the byrow designation.
B <- matrix(c(1, 2, 3, 2), nrow = 2, ncol = 2, byrow = FALSE)
B <- matrix(c(1, 2, 3, 2), nrow = 2, ncol = 2, byrow = TRUE)
```

Multiplication of a vector by a matrix is accomplished using the `%*%` command.

## The Matrix Inverse
The `solve()` function in R will find the inverse of a matrix if it exists and provide an error if it does not.

```
# Take the inverse of the 2 by 2 identity matrix
solve(diag(2))

# Take the inverse of the matrix A
Ainv <- solve(A)
```

```
# Add a row of 1's
M_2 <- rbind(M, 1)

# Add a column of -1's 
M_3 <- cbind(M_2, rep(-1, 13))

# Change the element in the lower-right corner of the matrix
M_3[13, 13] <- 1
```

use the Moore-Penrose generalized inverse in the `MASS' package and find that it produces the regular inverse if the matrix you're working with is already invertible!
The command `ginv()` computes the Moore-Penrose generalized inverse in R.

## Eigenvalues and Eigenvectors

```
> A
     [,1] [,2] [,3]
[1,]   -1    2    4
[2,]    0    7   12
[3,]    0    0   -4

# Show that 7 is an eigenvalue for A
A%*%c(0.2425356, 0.9701425, 0) - 7*c(0.2425356, 0.9701425, 0)
```
Note that there are often rounding errors that occur in R and, in this case, what you're seeing is an approximation of the zero vector.

```
> A
     [,1] [,2]
[1,]    1    2
[2,]    1    1

# Compute the eigenvalues of A and store in Lambda
Lambda <- eigen(A)

# Print eigenvalues
print(Lambda$values[1])
print(Lambda$values[2])

# Verify that these numbers satisfy the conditions of being an eigenvalue
det(Lambda$values[1]*diag(2) - A)
det(Lambda$values[2]*diag(2) - A)
```
the eigenvalues λ of a matrix A, and show that they satisfy the property that the matrix λI−A is not invertible, with determinant equal to zero.

```
# Print eigenvectors
print(Lambda$vectors[, 1])
print(Lambda$vectors[, 2])

# Verify that these eigenvectors & their associated eigenvalues satisfy Av - lambda v = 0
Lambda$values[1]*Lambda$vectors[, 1] - A%*%Lambda$vectors[, 1]
Lambda$values[2]*Lambda$vectors[, 2] - A%*%Lambda$vectors[, 2]
```
Why does R display the eigenvalues in descending order of size? The more the matrix is applied, the higher the influence of the largest eigenvalues.

```
# Make A into a matrix
A <- as.matrix(A)

# Subtract the mean of each column
A[, 1] <- A[, 1] - mean(A[, 1])
```
